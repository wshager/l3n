{"version":3,"sources":["../src/convert.js"],"names":["VNodeBuffer","constructor","nodes","add","v","unshift","count","length","flush","$o","s","next","pop","toVNodeStream","$s","props","toVNodeStreamCurried","bufSize","withAttrs","cx","inode","d","vnode","create","ndepth","stack","open","parents","openPairs","buffered","buf","checkStack","l","type","ol","last","parent","finalize","Close","node","name","key","_isBranch","undefined","push","depth","VNode","valueOf","value","JSON","parse","has","set","get","Observable","subscribe","cur","err","error","complete","fromVNodeStream","$node","k","entries"],"mappings":"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","sourcesContent":["/**\r\n * Stream conversion\r\n * @module convert\r\n */\r\n\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport * as inode from \"./inode\";\r\n\r\nimport { VNode, Close, getContext } from \"./vnode\";\r\n\r\nimport { isBranch, isLeaf, isClose, hasName } from \"./type\";\r\n\r\nclass VNodeBuffer {\r\n\tconstructor(nodes = []) {\r\n\t\tthis.nodes = nodes;\r\n\t}\r\n\tadd(v) {\r\n\t\tthis.nodes.unshift(v);\r\n\t}\r\n\tcount() {\r\n\t\treturn this.nodes.length;\r\n\t}\r\n\tflush($o, count = 1) {\r\n\t\tlet s = this.count();\r\n\t\twhile (s >= count) {\r\n\t\t\t//console.log(\"FLUSH\",s,count);\r\n\t\t\t$o.next(this.nodes.pop());\r\n\t\t\t--s;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Convert an L3 stream directly to a VNode stream, constructing the document while traversing\r\n * An L3 stream is a sequence of L3 constants as integers, and names or values as strings (parsers are expected to emit this kind of stream).\r\n * @param  {Observable} $s       The L3 stream as an Observable\r\n * @param  {Number} [bufSize=1]  Optional buffer size. Use NaN or Infinity to buffer everything\r\n * @return {Observable}          The VNode stream as an Observable\r\n */\r\nexport const toVNodeStream = ($s,props = {}) => toVNodeStreamCurried(props)($s);\r\nexport const toVNodeStreamCurried = ({bufSize = 1, withAttrs = false}) => $s => {\r\n\t// TODO fix bufSize = 0\r\n\tconst cx = getContext(this,inode);\r\n\t// create fragment node here; doc constructor expects children\r\n\tlet d = cx.vnode(cx.create(11,\"#document-fragment\"), 11);\r\n\tlet ndepth = 0,\r\n\t\tstack = [],\r\n\t\topen = [11],\r\n\t\tparents = [d],\r\n\t\topenPairs = {},\r\n\t\tbuffered = null,\r\n\t\tbuf = new VNodeBuffer();\r\n\tconst checkStack = () => {\r\n\t\tvar l = stack.length;\r\n\t\tif (!l) return;\r\n\t\tvar type = stack[0];\r\n\t\tvar ol = open.length - 1;\r\n\t\tvar last = open[ol],\r\n\t\t\tparent = parents[ol];\r\n\t\t// buffered is used to add attributes to elements before they're emitted\r\n\t\t// here buffered is released before anything else is processed (except attrs)\r\n\t\tif (last == 1 && buffered !== null && (withAttrs || type != 2)) {\r\n\t\t\t// console.log(\"buf\",buffered.name);\r\n\t\t\tbuf.add(buffered);\r\n\t\t\tbuffered = null;\r\n\t\t}\r\n\t\tif (isClose(type)) {\r\n\t\t\topen.pop();\r\n\t\t\tparents.pop();\r\n\t\t\t//console.log(\"closing\",ndepth,parent.node);\r\n\t\t\t--ndepth;\r\n\t\t\tstack = [];\r\n\t\t\tparent.finalize();\r\n\t\t\treturn buf.add(new Close(parent));\r\n\t\t} else {\r\n\t\t\tlet node = void 0,\r\n\t\t\t\tname = void 0,\r\n\t\t\t\tkey = void 0,\r\n\t\t\t\t_isBranch = isBranch(type);\r\n\t\t\tif (_isBranch) {\r\n\t\t\t\tndepth++;\r\n\t\t\t\tname = stack[1];\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\tif (last == 6) {\r\n\t\t\t\t\t\t// must be an open pair\r\n\t\t\t\t\t\tkey = openPairs[ndepth - 1];\r\n\t\t\t\t\t\topenPairs[ndepth - 1] = undefined;\r\n\t\t\t\t\t\t//console.log(\"picked up pair\",ndepth,key);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnode = cx.create(1,name);\r\n\t\t\t\t\tif (parent) parent.push([key, node]);\r\n\t\t\t\t\topen.push(type);\r\n\t\t\t\t\t// TODO use cx.vnode()\r\n\t\t\t\t\tlet depth = parent ? parent.depth + 1 : 1;\r\n\t\t\t\t\tlet vnode = new VNode(cx, node, type, name, key, isLeaf(type) ? node.valueOf() : null, parent, depth, parent ? parent.count() : 0);\r\n\t\t\t\t\t//let vnode = cx.vnode(node,parent,depth,parent ? parent.count() : 0,type);\r\n\t\t\t\t\t// buffer attributes\r\n\t\t\t\t\tbuffered = vnode;\r\n\t\t\t\t\t//console.log(\"opening element\",ndepth,name, buffered);\r\n\t\t\t\t\tparents.push(vnode);\r\n\t\t\t\t\tstack = [];\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcase 9:\r\n\t\t\t\t\tname = \"#document\";\r\n\t\t\t\t\tnode = cx.create(9,name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tname = \"#document-fragment\";\r\n\t\t\t\t\tnode = cx.create(11,name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 14:\r\n\t\t\t\tcase 15:\r\n\t\t\t\tcase 5:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\t// never emit until all pairs are closed (Why?)\r\n\t\t\t\t\tnode = cx.create(type,name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (last == 6) {\r\n\t\t\t\t\t// must be an open pair\r\n\t\t\t\t\tkey = openPairs[ndepth - 1];\r\n\t\t\t\t\topenPairs[ndepth - 1] = undefined;\r\n\t\t\t\t\t//console.log(\"picked up pair\",ndepth,key);\r\n\t\t\t\t}\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tparent.push([key, node]);\r\n\t\t\t\t}\r\n\t\t\t\topen.push(type);\r\n\t\t\t} else {\r\n\t\t\t\tif (type == 2) {\r\n\t\t\t\t\t// new model:\r\n\t\t\t\t\t// - create pair inode\r\n\t\t\t\t\t// - don't emit pair, but pair value /w key\r\n\t\t\t\t\topenPairs[ndepth] = stack[1];\r\n\t\t\t\t\t//console.log(\"opening pair\",ndepth,stack[1]);\r\n\t\t\t\t\tstack = [];\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet value = stack[1];\r\n\t\t\t\t\tif (type == 12) value = JSON.parse(value);\r\n\t\t\t\t\tnode = cx.create(type,value);\r\n\t\t\t\t\tif (openPairs[ndepth] !== undefined) {\r\n\t\t\t\t\t\tkey = openPairs[ndepth];\r\n\t\t\t\t\t\t//console.log(\"picked up pair\",ndepth,key);\r\n\t\t\t\t\t\t// NOTE unset pair! No seqs allowed in l3!\r\n\t\t\t\t\t\topenPairs[ndepth] = undefined;\r\n\t\t\t\t\t\tif (last == 6 || (last == 1 && withAttrs)) {\r\n\t\t\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\t\t\tif(parent.has(key)) {\r\n\t\t\t\t\t\t\t\t\tparent.set(key,parent.get(key) + \" \"+ node);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tparent.push([key, node]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (last == 1) {\r\n\t\t\t\t\t\t\tparent.set(key, value);\r\n\t\t\t\t\t\t\tstack = [];\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// error\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (parent) {\r\n\t\t\t\t\t\t\tparent.push([null, node]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstack = [];\r\n\t\t\tlet depth = parent ? parent.depth + 1 : type == 9 || type == 11 ? 0 : 1;\r\n\t\t\tlet vnode = new VNode(cx, node, type, name, key, isLeaf(type) ? node.valueOf() : null, parent, depth, parent ? parent.count() : 0);\r\n\t\t\t//let vnode = cx.vnode(node,parent,depth,parent ? parent.count() : 0,type);\r\n\t\t\tif (_isBranch) {\r\n\t\t\t\tparents.push(vnode);\r\n\t\t\t}\r\n\t\t\t//console.log(\"buf\",node.name);\r\n\t\t\tbuf.add(vnode);\r\n\t\t}\r\n\t};\r\n\treturn Observable.create($o => {\r\n\t\treturn $s.subscribe({\r\n\t\t\tnext: function next(cur) {\r\n\t\t\t\t// this will be the new version of streaming-fromL3!\r\n\t\t\t\tif (typeof cur == \"number\") {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tcheckStack();\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\treturn $o.error(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuf.flush($o, bufSize);\r\n\t\t\t\t}\r\n\t\t\t\tstack.push(cur);\r\n\t\t\t},\r\n\t\t\tcomplete: function complete() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcheckStack();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\treturn $o.error(err);\r\n\t\t\t\t}\r\n\t\t\t\t// flush all\r\n\t\t\t\tbuf.flush($o);\r\n\t\t\t\t$o.complete();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\nexport function fromVNodeStream($node) {\r\n\t// I know I know, not functional...\r\n\treturn Observable.create($o => {\r\n\t\t$node.subscribe({\r\n\t\t\tnext(vnode) {\r\n\t\t\t\tconst type = vnode.type;\r\n\t\t\t\tif(type == 9 || type == 11) return;\r\n\t\t\t\tif(vnode.key !== undefined) {\r\n\t\t\t\t\t$o.next(2);\r\n\t\t\t\t\t$o.next(vnode.key);\r\n\t\t\t\t}\r\n\t\t\t\t// NOTE doctype type needs to be serialized as 16, but we handle it in serialization\r\n\t\t\t\t$o.next(type);\r\n\t\t\t\t//console.log(type,vnode.name);\r\n\t\t\t\tif(hasName(type)) {\r\n\t\t\t\t\t$o.next(vnode.name);\r\n\t\t\t\t} else if(isLeaf(type)) {\r\n\t\t\t\t\t$o.next(vnode.value+\"\");\r\n\t\t\t\t}\r\n\t\t\t\t// emit all pairs\r\n\t\t\t\t// TODO provide option to traverse attributes...\r\n\t\t\t\tif(type == 1) {\r\n\t\t\t\t\tfor(let [k,v] of vnode.entries()) {\r\n\t\t\t\t\t\t$o.next(2);\r\n\t\t\t\t\t\t$o.next(k);\r\n\t\t\t\t\t\t$o.next(3);\r\n\t\t\t\t\t\t$o.next(v);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcomplete(){\r\n\t\t\t\t$o.complete();\r\n\t\t\t},\r\n\t\t\terror(err) {\r\n\t\t\t\t$o.error(err);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n"],"file":"convert.js"}