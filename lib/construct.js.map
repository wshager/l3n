{"version":3,"sources":["../src/construct.js"],"names":["e","a","x","r","l","m","p","c","f","q","name","children","value","target","content","args"],"mappings":";;;;;QAkBgBA,C,GAAAA,C;QAYAC,C,GAAAA,C;QASAC,C,GAAAA,C;QASAC,C,GAAAA,C;QASAC,C,GAAAA,C;QASAC,C,GAAAA,C;QAUAC,C,GAAAA,C;QASAC,C,GAAAA,C;QAUAC,C,GAAAA,C;QASAC,C,GAAAA,C;;AA9FhB;;AAEA;;;;;;AAMO,SAAST,CAAT,CAAWU,IAAX,EAAiB,GAAGC,QAApB,EAA8B;AACpC,SAAO,6BAAG,CAAH,EAAMD,IAAN,EAAYC,QAAZ,CAAP;AACA;;AAED;;;;;;;;AAtBA;;;;;;;;;;AA8BO,SAASV,CAAT,CAAWS,IAAX,EAAiBE,KAAjB,EAAwB;AAC9B,SAAO,6BAAGF,IAAH,EAASE,KAAT,CAAP;AACA;;AAED;;;;;AAKO,SAASV,CAAT,CAAWU,KAAX,EAAkB;AACxB,SAAO,6BAAG,CAAH,EAAMA,KAAN,CAAP;AACA;;AAED;;;;;AAKO,SAAST,CAAT,CAAWS,KAAX,EAAkB;AACxB,SAAO,6BAAG,CAAH,EAAMA,KAAN,CAAP;AACA;;AAED;;;;;AAKO,SAASR,CAAT,CAAW,GAAGO,QAAd,EAAwB;AAC9B,SAAO,6BAAG,CAAH,EAAM,IAAN,EAAYA,QAAZ,CAAP;AACA;;AAED;;;;;AAKO,SAASN,CAAT,CAAW,GAAGM,QAAd,EAAwB;AAC9B,SAAO,6BAAG,CAAH,EAAM,IAAN,EAAYA,QAAZ,CAAP;AACA;;AAED;;;;;;AAMO,SAASL,CAAT,CAAWO,MAAX,EAAmBC,OAAnB,EAA4B;AAClC,SAAO,6BAAG,CAAH,EAAMD,SAAS,GAAT,GAAeC,OAArB,CAAP;AACA;;AAED;;;;;AAKO,SAASP,CAAT,CAAWK,KAAX,EAAkB;AACxB,SAAO,6BAAG,CAAH,EAAMA,KAAN,CAAP;AACA;;AAED;;;;;;AAMO,SAASJ,CAAT,CAAWE,IAAX,EAAgB,GAAGK,IAAnB,EAAyB;AAC/B,SAAO,6BAAG,EAAH,EAAOL,IAAP,EAAaK,IAAb,CAAP;AACA;;AAED;;;;;AAKO,SAASN,CAAT,CAAW,GAAGM,IAAd,EAAoB;AAC1B,SAAO,6BAAG,EAAH,EAAO,IAAP,EAAaA,IAAb,CAAP;AACA","file":"construct.js","sourcesContent":["/**\r\n * VNode constructors are *lazy*: the temporary VNode holds a reference to a function instead of a concrete structure. The actual tree will be created when its parent VNode calls this function. There are several ways to achieve this:\r\n * * By ensuring that the tree has a document root (see `ensureDoc`)\r\n * * By wrapping the tree in a document constructor or document-fragment constructor (see `d` or `t` in [doc](./doc.md))\r\n * * By traversing the tree (see [traverse](./traverse.md))\r\n * At this point a 'document implementation context' can be also bound (JSON, DOM or persistent). After that, all functions will be called recursively to create the actual document with the chosen context (see [inode](./inode.md), [pnode](./pnode.md), [dom](./dom.md)).\r\n * Alternatively a structure can be created by calling the faux VNode's `node` method with a context directly.\r\n * @module construct\r\n */\r\n\r\nimport { _n, _a, _v } from \"./construct-impl-strict\";\r\n\r\n/**\n * Creates an element node, which can contain multiple nodes of any type, except `document`.\n * @param  {String|QName} name     The name of the element\n * @param  {VNode} children        The children of the element\n * @return {VNode}                A faux VNode\n */\nexport function e(name, ...children) {\n\treturn _n(1, name, children);\n}\n\n/**\n * Creates an attribute node under an element, or a pair under a map.\n * Can contain a single node of any other type, except `attribute`.\n * Note that when serializing to XML, attribute values are converted to a string following serializer parameters.\n * @param  {String|QName} name     The name of the attribute or pair\n * @param  {VNode} children        The value of the attribute\n * @return {VNode}                A faux VNode\n */\nexport function a(name, value) {\n\treturn _a(name, value);\n}\n\n/**\n * Creates a primitive value node, which can contain a javascript primitive (string, number, boolean or null).\n * @param  {String|Number|Boolean|Null} value The value of the node\n  * @return {VNode}                A faux VNode\n */\nexport function x(value) {\n\treturn _v(3, value);\n}\n\n/**\n * Creates a \"reference\" (or link) node, which can contain a (partial) URI-formatted string.\n * @param  {String} value The value of the node\n  * @return {VNode}                A faux VNode\n */\nexport function r(value) {\n\treturn _v(4, value);\n}\n\n/**\n * Creates a list (AKA array) node, which can contain multiple nodes of any type, except `document` and `attribute`.\n * @param  {VNode} children The children of the list\n * @return {VNode}          A faux VNode\n */\nexport function l(...children) {\n\treturn _n(5, null, children);\n}\n\n/**\n * Creates a map (AKA plain object) node, which can contain multiple nodes of type `attribute`.\n * @param  {VNode} children The children of the map\n * @return {VNode}          A faux VNode\n */\nexport function m(...children) {\n\treturn _n(6, null, children);\n}\n\n/**\n * Creates a processing instruction node.\n * @param  {String} target  The target part of the PI\n * @param  {String} content The content part of the PI\n * @return {VNode}         A faux VNode\n */\nexport function p(target, content) {\n\treturn _v(7, target + \" \" + content);\n}\n\n/**\n * Creates a comment node, which can contain a string.\n * @param  {String} value  The value of the node\n * @return {VNode}         A faux VNode\n */\nexport function c(value) {\n\treturn _v(8, value);\n}\n\n/**\n * Creates a \"function call\" node, which can contain nodes of any other type.\n * @param  {String|QName} name   The name of the function\n * @param  {VNode} name   The arguments to the function\n * @return {VNode}         A faux VNode\n */\nexport function f(name,...args) {\n\treturn _n(14, name, args);\n}\n\n/**\n * Creates a \"quotation\" (AKA lambda) node, which can contain nodes of any other type.\n * @param  {VNode} name   The body of the function\n * @return {VNode}         A faux VNode\n */\nexport function q(...args) {\n\treturn _n(15, null, args);\n}\n"]}