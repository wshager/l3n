{"version":3,"sources":["../src/multimap.js"],"names":["MultiMap","constructor","_buckets","_size","__is_MultiMap","push","entry","key","bucket","__is_Bucket","Bucket","get","vals","_values","len","length","out","Array","i","keys","l","val","multimap"],"mappings":";;;;;;;AAAA,MAAMA,QAAN,CAAe;AACdC,gBAAc;AACb,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA;;AACDC,OAAKC,KAAL,EAAY;AACX,QAAIC,MAAMD,MAAM,CAAN,CAAV;AACA,QAAIE,SAAS,KAAKN,QAAL,CAAcK,GAAd,CAAb;AACAD,UAAM,CAAN,IAAW,KAAKH,KAAL,EAAX;;AACA,QAAIK,UAAUA,OAAOC,WAArB,EAAkC;AACjCD,aAAOH,IAAP,CAAYC,KAAZ;AACA,KAFD,MAEO;AACN,WAAKJ,QAAL,CAAcK,GAAd,IAAqB,IAAIG,MAAJ,CAAWJ,KAAX,CAArB;AACA;;AACD,WAAO,IAAP;AACA;;AACDK,MAAIJ,GAAJ,EAAS;AACR,QAAIC,SAAS,KAAKN,QAAL,CAAcK,GAAd,CAAb;;AACA,QAAIC,UAAUA,OAAOC,WAArB,EAAkC;AACjC,UAAIG,OAAOJ,OAAOK,OAAlB;AAAA,UACCC,MAAMF,KAAKG,MADZ;AAEA,UAAID,QAAQ,CAAZ,EAAe;AACf,UAAIA,OAAO,CAAX,EAAc,OAAOF,KAAK,CAAL,EAAQ,CAAR,CAAP,CAJmB,CAKjC;;AACA,YAAMI,MAAM,IAAIC,KAAJ,CAAUH,GAAV,CAAZ;;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC7BF,YAAIE,CAAJ,IAASN,KAAKM,CAAL,EAAQ,CAAR,CAAT;AACA;;AACD,aAAOF,GAAP;AACA;AACD;;AACDG,SAAO;AACN;AACA,QAAIA,OAAO,EAAX;;AACA,SAAK,IAAID,IAAI,CAAR,EAAWE,IAAI,KAAKlB,QAAL,CAAca,MAAlC,EAA0CG,IAAIE,CAA9C,EAAiDF,GAAjD,EAAsD;AACrDC,WAAKD,CAAL,IAAU,KAAKhB,QAAL,CAAcgB,CAAd,EAAiB,CAAjB,CAAV;AACA;;AACD,WAAOC,IAAP;AACA;;AAvCa;;AA0Cf,MAAMT,MAAN,CAAa;AACZT,cAAYoB,GAAZ,EAAiB;AAChB,SAAKR,OAAL,GAAe,CAACQ,GAAD,CAAf;AACA,SAAKZ,WAAL,GAAmB,IAAnB;AACA;;AACDJ,OAAKgB,GAAL,EAAU;AACT,SAAKR,OAAL,CAAaR,IAAb,CAAkBgB,GAAlB;;AACA,WAAO,IAAP;AACA;;AARW;;AAWb,MAAMC,WAAW,MAAM,IAAItB,QAAJ,EAAvB;;eAEesB,Q","sourcesContent":["class MultiMap {\n\tconstructor() {\n\t\tthis._buckets = {};\n\t\tthis._size = 0;\n\t\tthis.__is_MultiMap = true;\n\t}\n\tpush(entry) {\n\t\tvar key = entry[0];\n\t\tvar bucket = this._buckets[key];\n\t\tentry[2] = this._size++;\n\t\tif (bucket && bucket.__is_Bucket) {\n\t\t\tbucket.push(entry);\n\t\t} else {\n\t\t\tthis._buckets[key] = new Bucket(entry);\n\t\t}\n\t\treturn this;\n\t}\n\tget(key) {\n\t\tvar bucket = this._buckets[key];\n\t\tif (bucket && bucket.__is_Bucket) {\n\t\t\tlet vals = bucket._values,\n\t\t\t\tlen = vals.length;\n\t\t\tif (len === 0) return;\n\t\t\tif (len == 1) return vals[0][1];\n\t\t\t// TODO fix order if needed\n\t\t\tconst out = new Array(len);\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tout[i] = vals[i][1];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n\tkeys() {\n\t\t// retain key types\n\t\tvar keys = [];\n\t\tfor (var i = 0, l = this._buckets.length; i < l; i++) {\n\t\t\tkeys[i] = this._buckets[i][0];\n\t\t}\n\t\treturn keys;\n\t}\n}\n\nclass Bucket {\n\tconstructor(val) {\n\t\tthis._values = [val];\n\t\tthis.__is_Bucket = true;\n\t}\n\tpush(val) {\n\t\tthis._values.push(val);\n\t\treturn this;\n\t}\n}\n\nconst multimap = () => new MultiMap();\n\nexport default multimap;\n"],"file":"multimap.js"}