{"version":3,"sources":["../src/multimap.js"],"names":["MultiMap","constructor","_buckets","_size","__is_MultiMap","push","entry","key","bucket","__is_Bucket","Bucket","get","vals","_values","len","length","out","Array","i","keys","l","val","multimap"],"mappings":";;;;;AAAA,MAAMA,QAAN,CAAe;AACdC,eAAc;AACb,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,KAAL,GAAa,CAAb;AACA,OAAKC,aAAL,GAAqB,IAArB;AACA;AACDC,MAAKC,KAAL,EAAY;AACX,MAAIC,MAAMD,MAAM,CAAN,CAAV;AACA,MAAIE,SAAS,KAAKN,QAAL,CAAcK,GAAd,CAAb;AACAD,QAAM,CAAN,IAAW,KAAKH,KAAL,EAAX;AACA,MAAIK,UAAUA,OAAOC,WAArB,EAAkC;AACjCD,UAAOH,IAAP,CAAYC,KAAZ;AACA,GAFD,MAEO;AACN,QAAKJ,QAAL,CAAcK,GAAd,IAAqB,IAAIG,MAAJ,CAAWJ,KAAX,CAArB;AACA;AACD,SAAO,IAAP;AACA;AACDK,KAAIJ,GAAJ,EAAS;AACR,MAAIC,SAAS,KAAKN,QAAL,CAAcK,GAAd,CAAb;AACA,MAAIC,UAAUA,OAAOC,WAArB,EAAkC;AACjC,OAAIG,OAAOJ,OAAOK,OAAlB;AAAA,OACCC,MAAMF,KAAKG,MADZ;AAEA,OAAID,QAAQ,CAAZ,EAAe;AACf,OAAIA,OAAO,CAAX,EAAc,OAAOF,KAAK,CAAL,EAAQ,CAAR,CAAP;AACd;AACA,SAAMI,MAAM,IAAIC,KAAJ,CAAUH,GAAV,CAAZ;AACA,QAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC7BF,QAAIE,CAAJ,IAASN,KAAKM,CAAL,EAAQ,CAAR,CAAT;AACA;AACD,UAAOF,GAAP;AACA;AACD;AACDG,QAAO;AACN;AACA,MAAIA,OAAO,EAAX;AACA,OAAK,IAAID,IAAI,CAAR,EAAWE,IAAI,KAAKlB,QAAL,CAAca,MAAlC,EAA0CG,IAAIE,CAA9C,EAAiDF,GAAjD,EAAsD;AACrDC,QAAKD,CAAL,IAAU,KAAKhB,QAAL,CAAcgB,CAAd,EAAiB,CAAjB,CAAV;AACA;AACD,SAAOC,IAAP;AACA;AAvCa;;AA0Cf,MAAMT,MAAN,CAAa;AACZT,aAAYoB,GAAZ,EAAiB;AAChB,OAAKR,OAAL,GAAe,CAACQ,GAAD,CAAf;AACA,OAAKZ,WAAL,GAAmB,IAAnB;AACA;AACDJ,MAAKgB,GAAL,EAAU;AACT,OAAKR,OAAL,CAAaR,IAAb,CAAkBgB,GAAlB;AACA,SAAO,IAAP;AACA;AARW;;AAWb,MAAMC,WAAW,MAAM,IAAItB,QAAJ,EAAvB;;kBAEesB,Q","file":"multimap.js","sourcesContent":["class MultiMap {\n\tconstructor() {\n\t\tthis._buckets = {};\n\t\tthis._size = 0;\n\t\tthis.__is_MultiMap = true;\n\t}\n\tpush(entry) {\n\t\tvar key = entry[0];\n\t\tvar bucket = this._buckets[key];\n\t\tentry[2] = this._size++;\n\t\tif (bucket && bucket.__is_Bucket) {\n\t\t\tbucket.push(entry);\n\t\t} else {\n\t\t\tthis._buckets[key] = new Bucket(entry);\n\t\t}\n\t\treturn this;\n\t}\n\tget(key) {\n\t\tvar bucket = this._buckets[key];\n\t\tif (bucket && bucket.__is_Bucket) {\n\t\t\tlet vals = bucket._values,\n\t\t\t\tlen = vals.length;\n\t\t\tif (len === 0) return;\n\t\t\tif (len == 1) return vals[0][1];\n\t\t\t// TODO fix order if needed\n\t\t\tconst out = new Array(len);\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tout[i] = vals[i][1];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n\tkeys() {\n\t\t// retain key types\n\t\tvar keys = [];\n\t\tfor (var i = 0, l = this._buckets.length; i < l; i++) {\n\t\t\tkeys[i] = this._buckets[i][0];\n\t\t}\n\t\treturn keys;\n\t}\n}\n\nclass Bucket {\n\tconstructor(val) {\n\t\tthis._values = [val];\n\t\tthis.__is_Bucket = true;\n\t}\n\tpush(val) {\n\t\tthis._values.push(val);\n\t\treturn this;\n\t}\n}\n\nconst multimap = () => new MultiMap();\n\nexport default multimap;\n"]}